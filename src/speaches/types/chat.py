# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2025-01-26T19:34:03+00:00

from __future__ import annotations

from typing import Any, Literal

from pydantic import BaseModel, Field


class Audio(BaseModel):
    id: str = Field(..., title="Id")


class ChatCompletionAudioParam(BaseModel):
    format: Literal["wav", "mp3", "flac", "opus", "pcm16"] = Field(..., title="Format")
    voice: Literal["alloy", "ash", "ballad", "coral", "echo", "sage", "shimmer", "verse"] = Field(..., title="Voice")


class ChatCompletionContentPartRefusalParam(BaseModel):
    refusal: str = Field(..., title="Refusal")
    type: Literal["refusal"] = Field(..., title="Type")


class ChatCompletionContentPartTextParam(BaseModel):
    text: str = Field(..., title="Text")
    type: Literal["text"] = Field(..., title="Type")


class ChatCompletionDeveloperMessageParam(BaseModel):
    content: str | list[ChatCompletionContentPartTextParam] = Field(..., title="Content")
    role: Literal["developer"] = Field(..., title="Role")
    name: str | None = Field(None, title="Name")


class ChatCompletionFunctionCallOptionParam(BaseModel):
    name: str = Field(..., title="Name")


class ChatCompletionFunctionMessageParam(BaseModel):
    content: str | None = Field(..., title="Content")
    name: str = Field(..., title="Name")
    role: Literal["function"] = Field(..., title="Role")


class ChatCompletionPredictionContentParam(BaseModel):
    content: str | list[ChatCompletionContentPartTextParam] = Field(..., title="Content")
    type: Literal["content"] = Field(..., title="Type")


class ChatCompletionStreamOptionsParam(BaseModel):
    include_usage: bool | None = Field(None, title="Include Usage")


class ChatCompletionSystemMessageParam(BaseModel):
    content: str | list[ChatCompletionContentPartTextParam] = Field(..., title="Content")
    role: Literal["system"] = Field(..., title="Role")
    name: str | None = Field(None, title="Name")


class ChatCompletionToolMessageParam(BaseModel):
    content: str | list[ChatCompletionContentPartTextParam] = Field(..., title="Content")
    role: Literal["tool"] = Field(..., title="Role")
    tool_call_id: str = Field(..., title="Tool Call Id")


class FunctionCall(BaseModel):
    arguments: str = Field(..., title="Arguments")
    name: str = Field(..., title="Name")


class FunctionDefinition(BaseModel):
    name: str = Field(..., title="Name")
    description: str | None = Field(None, title="Description")
    parameters: dict[str, Any] | None = Field(None, title="Parameters")
    strict: bool | None = Field(None, title="Strict")


class ImageURL(BaseModel):
    url: str = Field(..., title="Url")
    detail: Literal["auto", "low", "high"] | None = Field(None, title="Detail")


class InputAudio(BaseModel):
    data: str = Field(..., title="Data")
    format: Literal["wav", "mp3"] = Field(..., title="Format")


class JSONSchema(BaseModel):
    name: str = Field(..., title="Name")
    description: str | None = Field(None, title="Description")
    schema_: dict[str, Any] | None = Field(None, alias="schema", title="Schema")
    strict: bool | None = Field(None, title="Strict")


class ResponseFormatJSONObject(BaseModel):
    type: Literal["json_object"] = Field(..., title="Type")


class ResponseFormatJSONSchema(BaseModel):
    json_schema: JSONSchema
    type: Literal["json_schema"] = Field(..., title="Type")


class ResponseFormatText(BaseModel):
    type: Literal["text"] = Field(..., title="Type")


class OpenaiTypesChatChatCompletionMessageToolCallParamFunction(BaseModel):
    arguments: str = Field(..., title="Arguments")
    name: str = Field(..., title="Name")


class OpenaiTypesChatChatCompletionNamedToolChoiceParamFunction(BaseModel):
    name: str = Field(..., title="Name")


class OpenaiTypesChatCompletionCreateParamsFunction(BaseModel):
    name: str = Field(..., title="Name")
    description: str | None = Field(None, title="Description")
    parameters: dict[str, Any] | None = Field(None, title="Parameters")


class ChatCompletionContentPartImageParam(BaseModel):
    image_url: ImageURL
    type: Literal["image_url"] = Field(..., title="Type")


class ChatCompletionContentPartInputAudioParam(BaseModel):
    input_audio: InputAudio
    type: Literal["input_audio"] = Field(..., title="Type")


class ChatCompletionMessageToolCallParam(BaseModel):
    id: str = Field(..., title="Id")
    function: OpenaiTypesChatChatCompletionMessageToolCallParamFunction
    type: Literal["function"] = Field(..., title="Type")


class ChatCompletionNamedToolChoiceParam(BaseModel):
    function: OpenaiTypesChatChatCompletionNamedToolChoiceParamFunction
    type: Literal["function"] = Field(..., title="Type")


class ChatCompletionToolParam(BaseModel):
    function: FunctionDefinition
    type: Literal["function"] = Field(..., title="Type")


class ChatCompletionUserMessageParam(BaseModel):
    content: (
        str
        | list[
            ChatCompletionContentPartTextParam
            | ChatCompletionContentPartImageParam
            | ChatCompletionContentPartInputAudioParam
        ]
    ) = Field(..., title="Content")
    role: Literal["user"] = Field(..., title="Role")
    name: str | None = Field(None, title="Name")


class ChatCompletionAssistantMessageParam(BaseModel):
    role: Literal["assistant"] = Field(..., title="Role")
    audio: Audio | None = None
    content: str | list[ChatCompletionContentPartTextParam | ChatCompletionContentPartRefusalParam] | None = Field(
        None, title="Content"
    )
    function_call: FunctionCall | None = None
    name: str | None = Field(None, title="Name")
    refusal: str | None = Field(None, title="Refusal")
    tool_calls: list[ChatCompletionMessageToolCallParam] | None = Field(None, title="Tool Calls")


class CompletionCreateParamsBase(BaseModel):
    messages: list[
        ChatCompletionDeveloperMessageParam
        | ChatCompletionSystemMessageParam
        | ChatCompletionUserMessageParam
        | ChatCompletionAssistantMessageParam
        | ChatCompletionToolMessageParam
        | ChatCompletionFunctionMessageParam
    ] = Field(..., title="Messages")
    model: (
        str
        | Literal[
            "o1",
            "o1-2024-12-17",
            "o1-preview",
            "o1-preview-2024-09-12",
            "o1-mini",
            "o1-mini-2024-09-12",
            "gpt-4o",
            "gpt-4o-2024-11-20",
            "gpt-4o-2024-08-06",
            "gpt-4o-2024-05-13",
            "gpt-4o-audio-preview",
            "gpt-4o-audio-preview-2024-10-01",
            "gpt-4o-audio-preview-2024-12-17",
            "gpt-4o-mini-audio-preview",
            "gpt-4o-mini-audio-preview-2024-12-17",
            "chatgpt-4o-latest",
            "gpt-4o-mini",
            "gpt-4o-mini-2024-07-18",
            "gpt-4-turbo",
            "gpt-4-turbo-2024-04-09",
            "gpt-4-0125-preview",
            "gpt-4-turbo-preview",
            "gpt-4-1106-preview",
            "gpt-4-vision-preview",
            "gpt-4",
            "gpt-4-0314",
            "gpt-4-0613",
            "gpt-4-32k",
            "gpt-4-32k-0314",
            "gpt-4-32k-0613",
            "gpt-3.5-turbo",
            "gpt-3.5-turbo-16k",
            "gpt-3.5-turbo-0301",
            "gpt-3.5-turbo-0613",
            "gpt-3.5-turbo-1106",
            "gpt-3.5-turbo-0125",
            "gpt-3.5-turbo-16k-0613",
        ]
    ) = Field(..., title="Model")
    audio: ChatCompletionAudioParam | None = None
    frequency_penalty: float | None = Field(None, title="Frequency Penalty")
    function_call: Literal["none", "auto"] | ChatCompletionFunctionCallOptionParam | None = Field(
        None, title="Function Call"
    )
    functions: list[OpenaiTypesChatCompletionCreateParamsFunction] | None = Field(None, title="Functions")
    logit_bias: dict[str, int] | None = Field(None, title="Logit Bias")
    logprobs: bool | None = Field(None, title="Logprobs")
    max_completion_tokens: int | None = Field(None, title="Max Completion Tokens")
    max_tokens: int | None = Field(None, title="Max Tokens")
    metadata: dict[str, str] | None = Field(None, title="Metadata")
    modalities: list[Literal["text", "audio"]] | None = Field(None, title="Modalities")
    n: int | None = Field(None, title="N")
    parallel_tool_calls: bool | None = Field(None, title="Parallel Tool Calls")
    prediction: ChatCompletionPredictionContentParam | None = None
    presence_penalty: float | None = Field(None, title="Presence Penalty")
    reasoning_effort: Literal["low", "medium", "high"] | None = Field(None, title="Reasoning Effort")
    response_format: ResponseFormatText | ResponseFormatJSONObject | ResponseFormatJSONSchema | None = Field(
        None, title="Response Format"
    )
    seed: int | None = Field(None, title="Seed")
    service_tier: Literal["auto", "default"] | None = Field(None, title="Service Tier")
    stop: str | list[str] | None = Field(None, title="Stop")
    store: bool | None = Field(None, title="Store")
    stream_options: ChatCompletionStreamOptionsParam | None = None
    temperature: float | None = Field(None, title="Temperature")
    tool_choice: Literal["none", "auto", "required"] | ChatCompletionNamedToolChoiceParam | None = Field(
        None, title="Tool Choice"
    )
    tools: list[ChatCompletionToolParam] | None = Field(None, title="Tools")
    top_logprobs: int | None = Field(None, title="Top Logprobs")
    top_p: float | None = Field(None, title="Top P")
    user: str | None = Field(None, title="User")
